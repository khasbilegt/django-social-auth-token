[tool.black]
line-length = 120
target_version = ['py38']
include = '\.py$'
extend-exclude = '''
/(
  | migrations
)/
'''

[tool.isort]
profile = "black"
skip_glob = "*/migrations/*.py"

[tool.coverage.run]
branch = true
omit = [
  "*/.venv/*",
  "runtests.py",
  "makemigrations.py"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __str__"
]
omit = [
  "*/.venv/*",
  "runtests.py",
  "makemigrations.py"
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2

[tool.poetry]
name = "django-social-oauth-token"
version = "3.0.0"
description = "OAuth Token generation API for handling OAuth 2.0 Authentication Code Flow based on social-auth"
authors = ["Khasbilegt.TS <khasbilegt.ts@gmail.com>"]
license = "MIT"
homepage = "https://github.com/khasbilegt/django-social-oauth-token"
repository = "https://github.com/khasbilegt/django-social-oauth-token"
keywords = ["django", "model", "user", "email", "username", "custom"]
readme = "README.md"
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1"
]
packages = [
    { include = "social_oauth_token"},
]
include = [
    "LICENSE",
    "README.md"
]

[tool.poetry.dependencies]
python = "^3.9"
django-oauth-toolkit = "^2.1.0"
social-auth-app-django = "^5.0.0"

[tool.poetry.dev-dependencies]
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
nox = "^2024.4.15"
pytest-django = "^4.9.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["E", "F", "UP", "B", "SIM", "I"]
ignore = []

fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
